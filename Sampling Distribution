{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.2"
    },
    "colab": {
      "name": "Chapter 2 - Data and sampling distributions.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wcE5iesavWzv"
      },
      "source": [
        "# Sampling Distribution of Sample Statistics"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DOo5vSal_ri6"
      },
      "source": [
        "In inferential statistics, we want to use characteristics of the sample (i.e a statistic) to estimate the characteristics of the population (i.e. a parameter)\n",
        "\n",
        "If we obtain a random sample and calculate a sample statistic form that sample, the sample statistic is a random varaible. The population parameters are howerver fixed.\n",
        "\n",
        "Sampling Distribution: The sampling distribution of s statistic is a probability distribution based on large number of samples of size n from a given population."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DP-h-uRLvWz0"
      },
      "source": [
        "Import required Python packages."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-02-23T13:54:55.851963Z",
          "iopub.status.busy": "2021-02-23T13:54:55.851287Z",
          "iopub.status.idle": "2021-02-23T13:54:56.568859Z",
          "shell.execute_reply": "2021-02-23T13:54:56.568459Z"
        },
        "id": "KoxBzcRBvWz1"
      },
      "source": [
        "%matplotlib inline\n",
        "\n",
        "from pathlib import Path\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy import stats\n",
        "from sklearn.utils import resample\n",
        "\n",
        "import seaborn as sns\n",
        "import matplotlib.pylab as plt"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SaPbXPDIvmx_",
        "outputId": "be2765b4-7880-488b-92cd-3cf6a1ae2676"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fBAqWLWivWz4"
      },
      "source": [
        "Define paths to data sets. If you don't keep your data in the same directory as the code, adapt the path names."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-02-23T13:54:56.702046Z",
          "iopub.status.busy": "2021-02-23T13:54:56.701580Z",
          "iopub.status.idle": "2021-02-23T13:54:56.704296Z",
          "shell.execute_reply": "2021-02-23T13:54:56.703698Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KhFEkJwJvWz4",
        "outputId": "bc4a1c0d-89d0-4bff-d213-01125d5b383d"
      },
      "source": [
        "LOANS_INCOME_CSV = \"drive/MyDrive/TA/aug_2021/assgn_4_data/loans_income.csv\"\n",
        "print(LOANS_INCOME_CSV)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "drive/MyDrive/TA/aug_2021/assgn_4_data/loans_income.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1eANx7re12tn",
        "outputId": "5ea687e5-0abd-4987-f3c8-c45ca3797a6c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "ls drive/MyDrive/TA/aug_2021/assgn_4_data"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "assgn_prob_4.pdf  loans_income.csv  sp500_data.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-02-23T13:54:56.719667Z",
          "iopub.status.busy": "2021-02-23T13:54:56.708348Z",
          "iopub.status.idle": "2021-02-23T13:54:56.796509Z",
          "shell.execute_reply": "2021-02-23T13:54:56.796191Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "xLzZ_mWBvWz5",
        "outputId": "a7b65c92-cfa3-4902-9e64-08100f2fd75b"
      },
      "source": [
        "np.random.seed(seed=1)\n",
        "x = np.linspace(-3, 3, 300)\n",
        "xsample = stats.norm.rvs(size=1000)\n",
        "\n",
        "fig, axes = plt.subplots(ncols=2, figsize=(5, 1.5))\n",
        "\n",
        "ax = axes[0]\n",
        "ax.fill(x, stats.norm.pdf(x))\n",
        "ax.set_axis_off()\n",
        "ax.set_xlim(-3, 3)\n",
        "\n",
        "ax = axes[1]\n",
        "ax.hist(xsample, bins=30)\n",
        "ax.set_axis_off()\n",
        "ax.set_xlim(-3, 3)\n",
        "ax.set_position\n",
        "# plt.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x108 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fDJjzAA0vWz7"
      },
      "source": [
        "# Sampling Distribution of a Statistic"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-02-23T13:54:56.801707Z",
          "iopub.status.busy": "2021-02-23T13:54:56.801291Z",
          "iopub.status.idle": "2021-02-23T13:54:58.380821Z",
          "shell.execute_reply": "2021-02-23T13:54:58.380330Z"
        },
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IZ-MMP3FvWz7",
        "outputId": "b3b9b754-ae69-448c-8375-e6c4a86950af"
      },
      "source": [
        "loans_income = pd.read_csv(LOANS_INCOME_CSV, squeeze=True)\n",
        "\n",
        "sample_data = pd.DataFrame({\n",
        "    'income': loans_income.sample(1000),\n",
        "    'type': 'Data',\n",
        "})\n",
        "\n",
        "sample_mean_05 = pd.DataFrame({\n",
        "    'income': [loans_income.sample(50).mean() for _ in range(1000)],\n",
        "    'type': 'Mean of 50',\n",
        "})\n",
        "\n",
        "sample_mean_20 = pd.DataFrame({\n",
        "    'income': [loans_income.sample(200).mean() for _ in range(1000)],\n",
        "    'type': 'Mean of 200',\n",
        "})\n",
        "\n",
        "results = pd.concat([sample_data, sample_mean_05, sample_mean_20])\n",
        "print(results.head())"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "         income  type\n",
            "35684  103000.0  Data\n",
            "48252   64918.0  Data\n",
            "21447   50000.0  Data\n",
            "4479    85000.0  Data\n",
            "28868   35000.0  Data\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-02-23T13:54:58.385470Z",
          "iopub.status.busy": "2021-02-23T13:54:58.384871Z",
          "iopub.status.idle": "2021-02-23T13:54:58.806793Z",
          "shell.execute_reply": "2021-02-23T13:54:58.806337Z"
        },
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "frESHbtIvWz9",
        "outputId": "aef58c9b-56a8-404c-8e52-e89f91352101"
      },
      "source": [
        "g = sns.FacetGrid(results, col='type', col_wrap=1, \n",
        "                  height=2, aspect=2)\n",
        "g.map(plt.hist, 'income', range=[0, 200000], bins=40)\n",
        "g.set_axis_labels('Income', 'Count')\n",
        "g.set_titles('{col_name}')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 288x432 with 3 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JWBBu39wvWz-"
      },
      "source": [
        "# The Bootstrap"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-02-23T13:54:58.810477Z",
          "iopub.status.busy": "2021-02-23T13:54:58.810013Z",
          "iopub.status.idle": "2021-02-23T13:55:00.128015Z",
          "shell.execute_reply": "2021-02-23T13:55:00.127543Z"
        },
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JwxDiEoVvWz-",
        "outputId": "66e88f8f-9300-4caa-fa6c-b9daaea43f3d"
      },
      "source": [
        "results = []\n",
        "for nrepeat in range(1000):\n",
        "    sample = resample(loans_income)\n",
        "    results.append(sample.median())\n",
        "results = pd.Series(results)\n",
        "print('Bootstrap Statistics:')\n",
        "print(f'original: {loans_income.median()}')\n",
        "print(f'bias: {results.mean() - loans_income.median()}')\n",
        "print(f'std. error: {results.std()}')"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bootstrap Statistics:\n",
            "original: 62000.0\n",
            "bias: -73.86349999999948\n",
            "std. error: 220.6673950019942\n"
          ]
        }
      ]
    }
  ]
}